<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://cjsj156/cjsj156.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://cjsj156/cjsj156.github.io/" rel="alternate" type="text/html" /><updated>2025-05-07T00:01:56+09:00</updated><id>https://cjsj156/cjsj156.github.io/feed.xml</id><title type="html">3次元を理解しよう</title><subtitle>Developer blog of 2nd year graduate student in Institute of Science Tokyo.</subtitle><author><name>Doehyung Lee</name></author><entry><title type="html">Automating HPC Job Script Generation for Model Training and Evaluation</title><link href="https://cjsj156/cjsj156.github.io/projects/2025/05/06/Automating-HPC-Job-Script-Generation-for-Model-Training.html" rel="alternate" type="text/html" title="Automating HPC Job Script Generation for Model Training and Evaluation" /><published>2025-05-06T00:00:00+09:00</published><updated>2025-05-06T00:00:00+09:00</updated><id>https://cjsj156/cjsj156.github.io/projects/2025/05/06/Automating%20HPC%20Job%20Script%20Generation%20for%20Model%20Training</id><content type="html" xml:base="https://cjsj156/cjsj156.github.io/projects/2025/05/06/Automating-HPC-Job-Script-Generation-for-Model-Training.html"><![CDATA[<h2 id="introduction-running-my-code-on-an-hpc-cluster">Introduction: Running my code on an HPC cluster</h2>

<p><img src="/assets/job_scheduling_system.png" alt="job_scheduling_system" /></p>

<p>The figure shows a process of submitting a job to an HPC cluster and executing code.</p>

<p>I often run experiments involving training and testing computer vision models. Recently, I’ve been working with large models like Depth Anything, and in such cases, my local GPU’s VRAM is often insufficient. As a result, I’ve increasingly been using not only lab computers but also TSUBAME—the supercomputer owned by my university. However, an HPC (High Performance Computing) cluster like TSUBAME is a shared resource among multiple users, so I can’t just run my program whenever I want. Instead, I need to submit a script specifying what resources I need and which program I want to run. The system uses this request to allocate appropriate resources and execute the program. This kind of system is called a job scheduling system (or more broadly, a batch system), and the script that includes the code and required resources is called a job.</p>
<h2 id="problem-writing-a-job-script-is-too-tedious">Problem: Writing a job script is too tedious</h2>
<p>Writing that script manually is a tedious task. When running similar experiments repeatedly, the required resources usually don’t change much, but I still had to write the same script over and over again. This manual process also led to frequent mistakes, like inputting the wrong hyperparameters and ending up with useless training runs.</p>
<h2 id="solution-write-a-script-that-manages-job-submission">Solution: Write a script that manages job submission</h2>

<p><img src="/assets/HPC_job_script_generator.png" alt="job_scheduling_system" /></p>

<p>The figure above shows the workflow of a program that automatically generates job scripts. For example, I can call a shell function named <code class="language-plaintext highlighter-rouge">train_manager</code> (defined in <code class="language-plaintext highlighter-rouge">.bashrc</code>) with an argument like <code class="language-plaintext highlighter-rouge">--experiment train_with_batch_4</code>. This shell function then invokes a Python script and passes along the argument. The Python script looks up the hyper parameters for <code class="language-plaintext highlighter-rouge">train_with_batch_4</code> from a file that stores settings for multiple experiment versions. It combines these hyper parameters with a boilerplate job script template to generate the final <code class="language-plaintext highlighter-rouge">train_script</code>. The shell function then receives this script and immediately submits it to the scheduler.</p>
<h4 id="shell-function">shell function</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function </span>train_manager<span class="o">()</span> <span class="o">{</span>
        conda activate <span class="nb">env
        local </span><span class="nv">python_script</span><span class="o">=</span><span class="s2">"train_script_composer.py"</span>
        <span class="nb">local </span><span class="nv">script_path</span><span class="o">=</span><span class="si">$(</span>python <span class="s2">"</span><span class="nv">$python_script</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span><span class="si">)</span>

        <span class="k">if</span> <span class="o">[[</span> <span class="nv">$script_path</span> <span class="o">!=</span> <span class="s2">"error"</span> <span class="o">]]</span><span class="p">;</span>  <span class="k">then
                </span>qsub <span class="nt">-g</span> group_name <span class="s2">"</span><span class="nv">$script_path</span><span class="s2">"</span>
        <span class="k">fi</span>
<span class="o">}</span>
</code></pre></div></div>
<h4 id="python-script">Python script</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span> <span class="c1"># importing modules
</span>
<span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="n">ArgumentParser</span><span class="p">()</span>
<span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'--hyper_params'</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">'default'</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"name of your experiment"</span><span class="p">)</span> <span class="c1"># Takes an argument from shell function
</span><span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="n">parse_args</span><span class="p">()</span>

<span class="n">boilerplate_script_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s">'boilerplate.sh'</span><span class="p">)</span> <span class="c1"># Reads boilerplate script
</span>
<span class="p">...</span> <span class="c1"># Putting boilerplate script and hyper parameters for training script arugment together
</span>
<span class="k">return</span> <span class="n">train_script_path</span> <span class="c1"># Then return the path of the completed script
</span>
</code></pre></div></div>
<p>In addition to this, I added several functions to this pipeline, such as automatically finding the latest trained epoch for resuming training, evaluating the model of certain epoch on certain dataset.</p>
<h3 id="how-i-approached-to-this-problem">How I approached to this problem</h3>
<p>First, I separated the components required for the job script. These components fall into two categories: (1) the necessary resources, such as the number of CPUs or GPUs, and (2) the hyper parameters or metadata about the experiment—like which dataset to use. I used Python’s <code class="language-plaintext highlighter-rouge">dataclass</code> to define this information. This is a particularly appropriate design choice, as Python’s <code class="language-plaintext highlighter-rouge">dataclass</code> allows dot notation for accessing member variables, similar to <code class="language-plaintext highlighter-rouge">argparse.Namespace</code>. By replacing the <code class="language-plaintext highlighter-rouge">args</code> object that used to hold a <code class="language-plaintext highlighter-rouge">Namespace</code> with a <code class="language-plaintext highlighter-rouge">dataclass</code>, I could use the same code without any issues. After completing the Python script, I defined a shell function in my <code class="language-plaintext highlighter-rouge">.bashrc</code> that both runs the generated Python script and takes care of submitting the job instead of me. </p>
<h2 id="result-how-effective-was-it">Result: How effective was it?</h2>
<p>It was extremely effective. It didn’t just save time—it also prevented errors that often occurred when writing job scripts manually. Validation time was drastically reduced as well. For example, suppose I had to evaluate models from epoch 0 to 200 and there was only one day left before a research meeting. I could instantly generate evaluation scripts for checkpoints from epoch 0–10, 10–20, 20–30, and so on, reducing validation time to one-tenth. Of course, this costs money for using TSUBAME, but the lab covers the usage fees, not me lol.</p>
<h2 id="reflection-what-was-the-hard-part-what-is-a-takeaway">Reflection: What was the hard part? What is a takeaway?</h2>
<p>Initially, I was hesitant to deviate from the established workflow. There are regular research meetings, and I didn’t want to be scolded for wasting time on automating job script generation—a task that doesn’t even need to be discussed in meetings. Plus, since research directions often change unpredictably, I had to design the program carefully so that it wouldn’t become useless for future experiments. But in the end, it paid off, and I strongly felt that the ability to design my own tools and workflow is one of the great privileges of being a programmer.</p>]]></content><author><name>Doehyung Lee</name></author><category term="projects" /><category term="Blog" /><summary type="html"><![CDATA[The ability to make one's own tools is one of a programmer's biggest strengths.]]></summary></entry><entry><title type="html">Tried Vulkan for Image Resizing</title><link href="https://cjsj156/cjsj156.github.io/projects/2025/05/04/Tried-Vulkan-for-Image-Resizing.html" rel="alternate" type="text/html" title="Tried Vulkan for Image Resizing" /><published>2025-05-04T00:00:00+09:00</published><updated>2025-05-04T00:00:00+09:00</updated><id>https://cjsj156/cjsj156.github.io/projects/2025/05/04/Tried%20Vulkan%20for%20Image%20Resizing</id><content type="html" xml:base="https://cjsj156/cjsj156.github.io/projects/2025/05/04/Tried-Vulkan-for-Image-Resizing.html"><![CDATA[<h3 id="can-we-make-image-processing-faster-with-smartphone-gpu-with-vulkan">Can we make image processing faster with smartphone GPU with Vulkan?</h3>

<h4 id="background">Background</h4>
<p>Nefrock, the company where I worked on this project, wanted to examine the possibility of optimizing image preprocessing using the GPU of a smartphone. They’re providing a service for real-time OCR on smartphones, and while the deep learning model itself can perform computations on the smartphone GPU, the image input to the model was not preprocessed on the GPU. So they wanted to explore whether it’s possible to preprocess images (resizing, in this case) directly on the GPU and achieve better speed.</p>

<h4 id="technology-stacks-for-implementation">Technology Stacks for Implementation</h4>
<p>We used C++ with Vulkan.</p>

<h4 id="what-and-how-to-implement">What and How to Implement?</h4>

<p>First, my adviser asked me to implement very simple process: <strong>get the camera image, then resize it</strong>.
I needed to implement this process in two versions.:</p>

<ul>
  <li><strong>CPU Resizing</strong>: using only CPU and OpenCV</li>
  <li><strong>Vulkan Resizing</strong>: using smartphone GPU via Vulkan</li>
</ul>

<p>After implementation, we compared the time taken for resizing images captured from the camera.</p>

<p>We referred to <a href="https://github.com/ktzevani/native-camera-vulkan">this GitHub project</a>, which uses Vulkan for image processing on Android, and built our application based on it.</p>

<h4 id="two-types-of-camera-image-resize-application-logic">Two Types of Camera Image Resize Application Logic</h4>

<h5 id="cpu-resizing">CPU Resizing</h5>

<p><img src="/assets/CPU_Resizing.png" alt="" /></p>

<p>This version is straightforward. It captures an image from the camera, copies it to unified memory accessible by the CPU, and resizes it using OpenCV. We measured the time from when the image data arrived at the Hardware Buffer to the completion of resizing.</p>

<p>If you’re unfamiliar with <strong>Hardware Buffer</strong> and <strong>Unified Memory</strong>:</p>

<ul>
  <li><strong>Hardware Buffer</strong>: memory accessible by hardware like camera and GPU</li>
  <li><strong>Unified Memory</strong>: shared memory accessible from both CPU and GPU Most modern smartphones have this architecture.</li>
</ul>

<h5 id="vulkan-resizing">Vulkan Resizing</h5>
<p><img src="/assets/Vulkan_Resizing%201.png" alt="" />
This version uses the GPU for resizing. Light green arrows represent GPU processes. After acquiring the camera image into Hardware Buffer, the GPU copies it into unified memory, performs resizing (rendering at a lower resolution using Vulkan API), and copies the image onto a <strong>Staging Buffer</strong>.</p>

<p>GPU does perform the resizing as intended, but the process is more complex. New concepts like <strong>Staging Buffer</strong> and <strong>Image</strong> objects come into play.</p>

<p>Before I proceed to what those are, I’d like to introduce the typical behaviour of Vulkan in an ordinary PC.</p>

<p>Vulkan Work Flow in Ordinary PC
<img src="/assets/Vulkan_Operation_in_Ordinary_PC_2.png" alt="Vulkan_Operation_in_Ordinary_PC" /></p>

<p>This is the work flow of Vulkan in oridnary PC step by step.</p>

<ol>
  <li>Create a Staging Buffer from image data</li>
  <li>Copy the data to GPU VRAM as an Image object</li>
  <li>Perform rendering operations on the Image</li>
  <li>Convert the Image back to Staging Buffer and copy it to CPU-accessible RAM</li>
</ol>

<p>Typically, ordinary PCs have dedicated VRAM for GPU and it has no access to RAM, unlike the case of unified memory where both CPU and GPU can access the same memory space. To let the GPU access RAM, we need to arrange the data according to certain requirements. That can be done by converting the image data into <strong>Staging Buffer</strong> object following Vulkan API requirements. Then the data is prepared for GPU copying. After that, the GPU copies the image to VRAM and simultaneously transforms it into an <strong>Image</strong> object. This Image object ensures the image data meets specific GPU-side constraints just simliar to Staging Buffer object. Then, the GPU performs graphical operations on the Image. Once finished, the GPU gives the Image back to the CPU by copying it into another Staging Buffer on RAM. This is the typical process of Vulkan, and the <a href="https://vulkan-tutorial.com/Introduction">Vulkan Tutorial</a> explains this approach in detail.</p>

<p>In our smartphone case, since memory is unified, we assumed <strong>Staging Buffer</strong> might not be necessary. However, we still followed the full pipeline due to the complexity of deviating from the standard process.</p>

<h5 id="vulkan-rendering-process-and-prgramming">Vulkan Rendering Process and Prgramming</h5>
<p>Compared to OpenCV, Vulkan required:</p>

<ol>
  <li>A full <strong>rendering pipeline</strong></li>
  <li>Programming at a much <strong>lower abstraction level</strong></li>
</ol>

<p>Vulkan image rendering pipeline is as below.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>image + vertex (input)
   -&gt; Vertex Shader
   -&gt; Rasterization
   -&gt; Fragment Shader
   -&gt; Rendered Image (output)
</code></pre></div></div>
<p>This is fundamentally different from OpenCV, which treats images as matrices and applies operations pixel-wise. Vulkan is focused on rendering and uses 3D concepts like MVP (Model-View-Projection) transformation. In the <a href="https://github.com/ktzevani/native-camera-vulkan">codebase we used</a>, the original rendering logic was for a rotating cube. We modified it to render a static rectangle, resized through vertex positioning, and aligned the camera view perpendicularly.</p>

<p>About lower abstraction level, I had to carefully set every detailed settings everytime I make an object like below. </p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>VkImageCreateInfo imageInfo{};
imageInfo.sType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
imageInfo.imageType = VK_IMAGE_TYPE_2D;
imageInfo.extent.width = static_cast&lt;uint32_t&gt;(texWidth);
imageInfo.extent.height = static_cast&lt;uint32_t&gt;(texHeight);
imageInfo.extent.depth = 1;
imageInfo.mipLevels = 1;
imageInfo.arrayLayers = 1;
...
</code></pre></div></div>

<p>These are settings just for making an Image object. These settings continue even more. And these settings should be set exactly according to your usage otherwise it wouldn’t work. Although this low-level design makes Vulkan blazingly fast, it makes also programming very stressful.</p>

<h4 id="result">Result</h4>
<p>We compared performance:</p>

<ul>
  <li><strong>CPU Resizing</strong>: 6–8ms/image</li>
  <li><strong>Vulkan Resizing</strong>: 50–70ms/image</li>
</ul>

<p>Despite expecting speed-up from GPU, the Vulkan version was <strong>significantly slower</strong>. Even accounting for sequential processing of images (limiting parallelism), the difference was too large. We suspect that the overhead from using <strong>Staging Buffers</strong> in Vulkan was a major cause.</p>

<p>We couldn’t test a Staging Buffer-free version due to time constraints.</p>
<h4 id="conclusion">Conclusion</h4>
<p>Using <strong>Vulkan’s graphics pipeline</strong> for preprocessing images on smartphones is <strong>not practical</strong> for Nefrock’s real-time OCR use case. Following Vulkan’s typical process adds overhead that negates GPU benefits. Also, Vulkan’s low-level programming drastically reduces productivity, which doesn’t align well with deep learning development where rapid prototyping is important.</p>

<h4 id="note">Note</h4>
<p>However, this does not mean GPU-based preprocessing is hopeless:</p>

<ul>
  <li>We did <strong>not test Vulkan’s compute shaders</strong>, which allow general-purpose GPU (GPGPU) programming and may offer simpler and more efficient processing.</li>
  <li>Vulkan’s <strong>hardware compatibility</strong> is excellent, making it a viable option for large-scale deployment across diverse edge devices.</li>
</ul>

<h4 id="reflection">Reflection</h4>
<p>Using C++ and Vulkan to implement low-level GPU processing on smartphones was frustrating but also rewarding. Learning about 3D graphics related contents such as MVP transformations was fun. But I regret not accomplishing more during the internship. I often jumped straight into coding without grasping the whole architecture, and it worked for many cases but this time I overlooked the fact that Vulkan wasn’t that simple. I need to go back to review concepts in Vulkan after making useless codes. I learned that balancing hands-on attempts with structured understanding is essential.</p>]]></content><author><name>Doehyung Lee</name></author><category term="projects" /><category term="Blog" /><summary type="html"><![CDATA[Tried Vulkan on Android]]></summary></entry><entry><title type="html">블로그 운영용 메모</title><link href="https://cjsj156/cjsj156.github.io/just-notes/2025/05/03/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9A%B4%EC%98%81%EC%9A%A9-%EB%A9%94%EB%AA%A8.html" rel="alternate" type="text/html" title="블로그 운영용 메모" /><published>2025-05-03T00:00:00+09:00</published><updated>2025-05-03T00:00:00+09:00</updated><id>https://cjsj156/cjsj156.github.io/just-notes/2025/05/03/%EB%B8%94%EB%A1%9C%EA%B7%B8%20%EC%9A%B4%EC%98%81%EC%9A%A9%20%EB%A9%94%EB%AA%A8</id><content type="html" xml:base="https://cjsj156/cjsj156.github.io/just-notes/2025/05/03/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9A%B4%EC%98%81%EC%9A%A9-%EB%A9%94%EB%AA%A8.html"><![CDATA[<h3 id="github-pages란">Github Pages란?</h3>
<p>github pages는 호스팅할 내용을 markdown 파일로 github repo에 올리면, 그 내용을 Jekyll을 사용해서 markdown 을 html 로 변환하고 호스팅해주는 서비스임.</p>

<h3 id="jekyll이란">Jekyll이란?</h3>
<p>ruby 로 작성된 프로그램으로, markdown 파일을 호스팅 가능한 html 파일 등으로 변환시켜주는 프로그램. gem 이라는 ruby에서의 패키지 인스톨러를 통해 설치할 수 있음.</p>

<h3 id="구체적으로-뭘-하면-되나">구체적으로 뭘 하면 되나?</h3>

<p>로컬에서 만든 프로젝트에</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle exec jekyll serve
</code></pre></div></div>
<p>로 build, hosting을 해보고, build랑 로컬에서의 호스팅이 제대로 되는 것을 확인.
이후에 git push</p>

<h3 id="bundle은-뭔가">bundle은 뭔가?</h3>
<p>bundle은 ruby project의 의존성을 관리해주는 녀석임. 
<code class="language-plaintext highlighter-rouge">bundle exec</code> 하면, 현재 Ruby 프로젝트에 명시된 패키지(gem) 들만 사용해서 명령을 실행함.</p>

<h3 id="의존성관리에-관해-ruby와-python을-비교한다면">의존성관리에 관해 ruby와 python을 비교한다면?</h3>

<table>
  <thead>
    <tr>
      <th>요소</th>
      <th>역할</th>
      <th>Python 비유</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">gem</code></td>
      <td>패키지 관리 명령어</td>
      <td><code class="language-plaintext highlighter-rouge">pip</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">jekyll</code></td>
      <td>설치 대상 패키지</td>
      <td><code class="language-plaintext highlighter-rouge">mkdocs</code>, <code class="language-plaintext highlighter-rouge">flask</code> 등</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Gemfile</code></td>
      <td>의존성 선언 파일</td>
      <td><code class="language-plaintext highlighter-rouge">requirements.txt</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">bundler</code></td>
      <td>의존성 관리 도구</td>
      <td><code class="language-plaintext highlighter-rouge">pip</code> + <code class="language-plaintext highlighter-rouge">virtualenv</code> 유사</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">bundle install</code></td>
      <td>의존성 설치</td>
      <td><code class="language-plaintext highlighter-rouge">pip install -r requirements.txt</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">bundle exec</code></td>
      <td>지정된 환경에서 실행</td>
      <td><code class="language-plaintext highlighter-rouge">source venv/bin/activate &amp;&amp; python ...</code> 유사</td>
    </tr>
  </tbody>
</table>

<p>참고:</p>

<p>취미로 코딩하는 개발자님의 github pages 튜토리얼: https://devinlife.com/howto/</p>

<p>jekyll 공식 웹사이트: https://jekyllrb.com/docs/usage/</p>

<p>kerupani129님의 ubuntu로 최신 ruby를 설치하는 법: https://qiita.com/kerupani129/items/77dd1e3390b53f4e97b2</p>

<p>minimal-mistakes github repo: https://github.com/mmistakes/minimal-mistakes</p>]]></content><author><name>Doehyung Lee</name></author><category term="just-notes" /><summary type="html"><![CDATA[나중에 또 방치해놓고 까먹을 경우를 대비하여]]></summary></entry><entry><title type="html">팀 랩 면접 봄</title><link href="https://cjsj156/cjsj156.github.io/just-notes/2024/07/03/%ED%8C%80%EB%9E%A9-%EB%A9%B4%EC%A0%91-%EB%B4%84.html" rel="alternate" type="text/html" title="팀 랩 면접 봄" /><published>2024-07-03T00:00:00+09:00</published><updated>2024-07-03T00:00:00+09:00</updated><id>https://cjsj156/cjsj156.github.io/just-notes/2024/07/03/%ED%8C%80%EB%9E%A9%20%EB%A9%B4%EC%A0%91%20%EB%B4%84</id><content type="html" xml:base="https://cjsj156/cjsj156.github.io/just-notes/2024/07/03/%ED%8C%80%EB%9E%A9-%EB%A9%B4%EC%A0%91-%EB%B4%84.html"><![CDATA[<h4 id="질문대답">질문&amp;대답</h4>
<ul>
  <li>지원동기 -&gt; 벤처기업 체험 -&gt; 근데 우리 이제 벤처 아님 -&gt; ? ㅋㅋㅋㅋㅋㅋㅋㅋ</li>
  <li>자기소개 -&gt; 일본에서 대학 나왓구요 지금 석사하고요….</li>
  <li>개미/벌 인식 라인트레이싱에서 어떤 식으로 모델을 만들었는지 -&gt; 까먹어서 열심히 지어냈음. 모델 고르고 데이터 모아서 파인튜닝했다고 적당히 말함. 아마 여기서 뭔가 특별한 걸 했는지 알고 싶었는듯?</li>
  <li>3관절 로봇 프로젝트에서 자기가 맡은 역할 (팀 개발 경험) -&gt; 수업에서 배운 이론을 코드화하는 것을 했다고 함.</li>
  <li>자신의 연구의 차별점은 무엇인지 -&gt; 기밀이라 말할 수 없음</li>
  <li>배속되고 싶은 팀은 어디인지 -&gt; 화상처리 -&gt; 오 요즘애들은 기계학습하고싶어하던데… -&gt; 어라? 그게 분리되어있어요?? ㅋㅋㅋㅋㅋㅋㅋ</li>
</ul>

<h4 id="소감">소감</h4>
<ul>
  <li>일단 벤쳐가 아닌듯? ㅋㅋㅋㅋㅋ</li>
  <li>자기소개는 일단 준비해가야할 듯</li>
  <li>주로 전문성을 묻는 느낌.</li>
  <li>팀프로젝트 경험도 중요시하는 듯</li>
  <li>이전 프로젝트를 기반으로 한 질문이 많았음. 이렇게 되면 CV 프로젝트를 좀 해두는 게 좋겠는데?</li>
  <li>연구 관련된 내용도 있었음. 학사 때 한 내용이랑 석사 때 한 내용을 좀 나눠서 얘기하는 게 좋을지도?</li>
  <li>팀이 화상처리 &lt;-&gt; 기계학습으로 나뉘어져있음 -&gt; 이건 좀 급소였네? 난 당연히 둘 다 하는 건 줄 알았는데 말이지</li>
  <li>화상처리는 좀 더 엄격한 수학적인 처리에 가까움.</li>
  <li>기계학습은 이미지의 딥러닝도 포함해서 하는 것.</li>
</ul>]]></content><author><name>Doehyung Lee</name></author><category term="just-notes" /><summary type="html"><![CDATA[망한듯 ㅋㅋㅋㅋㅋ]]></summary></entry><entry><title type="html">主成分分析の幾何学的な意味</title><link href="https://cjsj156/cjsj156.github.io/study-notes/2024/06/30/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90%E3%81%AE%E5%B9%BE%E4%BD%95%E5%AD%A6%E7%9A%84%E3%81%AA%E6%84%8F%E5%91%B3.html" rel="alternate" type="text/html" title="主成分分析の幾何学的な意味" /><published>2024-06-30T00:00:00+09:00</published><updated>2024-06-30T00:00:00+09:00</updated><id>https://cjsj156/cjsj156.github.io/study-notes/2024/06/30/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90%E3%81%AE%E5%B9%BE%E4%BD%95%E5%AD%A6%E7%9A%84%E3%81%AA%E6%84%8F%E5%91%B3</id><content type="html" xml:base="https://cjsj156/cjsj156.github.io/study-notes/2024/06/30/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90%E3%81%AE%E5%B9%BE%E4%BD%95%E5%AD%A6%E7%9A%84%E3%81%AA%E6%84%8F%E5%91%B3.html"><![CDATA[<h4 id="問題認識">問題認識</h4>
<p>講義を受ける中で主成分分析の主軸方向が共分散行列の固有ベクトルになるということが納得が行かず、幾何学的な理解方法はないか考察してみることにした。</p>

<h4 id="結論">結論</h4>
<ul>
  <li>共分散行列はベクトルを楕円(体)に伸ばす線形変換</li>
  <li>その楕円の長軸、短軸が主軸になる。（2次元の場合）</li>
  <li>その軸に射影をすることで次元削減ができる。</li>
</ul>

<h4 id="説明">説明</h4>
<p>以下のように2次元座標軸の原点を中心に円状に分散している点があると使用。
<img src="https://cjsj156/cjsj156.github.io/assets/images/PCA1.png" alt="" /></p>

<p>この点に対してある共分散行列で線形変換を行うと、以下のようになる。
<img src="https://cjsj156/cjsj156.github.io/assets/images/PCA2.png" alt="" /></p>

<p>その共分散行列が表している分布になるように変換される。
ここではその共分散行列がxy方向に多く伸ばされるものだったとすると、
線形変換後にはあの橙色の点になる。</p>

<p>ここで主成分分析の主軸というのは楕円の長軸と短軸になる。
長軸に対して射影をし、その長軸を新しい軸にするとデータのばらつきが一番大きい部分を残す（情報を残す）ことができる。</p>

<p>主軸が楕円の軸になるということから、主軸同士がどうして垂直関係になるのかも直感的に理解できる。</p>]]></content><author><name>Doehyung Lee</name></author><category term="study-notes" /><summary type="html"><![CDATA[主成分分析の幾何学的な意味]]></summary></entry><entry><title type="html">Auto Schedule Register</title><link href="https://cjsj156/cjsj156.github.io/projects/2024/06/23/Auto-Schedule-Register.html" rel="alternate" type="text/html" title="Auto Schedule Register" /><published>2024-06-23T00:00:00+09:00</published><updated>2024-06-23T00:00:00+09:00</updated><id>https://cjsj156/cjsj156.github.io/projects/2024/06/23/Auto-Schedule-Register</id><content type="html" xml:base="https://cjsj156/cjsj156.github.io/projects/2024/06/23/Auto-Schedule-Register.html"><![CDATA[<h2 id="auto-schedule-register">Auto Schedule Register</h2>

<h6 id="github--httpsgithubcomcjsj166auto-schedule-register">github : https://github.com/cjsj166/auto-schedule-register</h6>
<h6 id="link--httpschromewebstoregooglecomdetailfjodbpikdciljgollogaefihdnkfnilepreviewhlkoauthuser0">link : https://chromewebstore.google.com/detail/fjodbpikdciljgollogaefihdnkfnile/preview?hl=ko&amp;authuser=0</h6>

<p>##</p>

<p>“Information about arranged schedule will be provided.\n\</p>

<p>Do your best to describe the schedule as concisely as possible in json format.\n\</p>

<p>Required json format is as follow\nY:year M:month D:day h:hour m:minute s:second X:unknown\n\</p>

<p>You can use X instead of any other character if you cannot determine specific year, month, date ex)XXXX-02-13T15:20:00\n\</p>

<p>{ "starting_date_time": "YYYY-MM-DDThh:mm:ss", "end_date_time": "YYYY-MM-DDThh:mm:ss", "title": "Title of the event", "description": "description of the meeting, meeting room url, address of the place, etc." }”</p>

<p>//</p>

<p>“Information about arranged schedule will be provided.\n\</p>

<p>Do your best to describe the schedule as concisely as possible in json format.\n\</p>

<p>Required json format is as follow.\n\</p>

<p>{ "starting_date_time": "YYYY-MM-DDThh:mm:ss", "end_date_time": "YYYY-MM-DDThh:mm:ss", "title": "Title of the event", "description": "description of the meeting, meeting room url, address of the place, etc." }\n\</p>

<p>If you only know relative time duration, the json format should be as follow.\n\</p>

<p>{ "starting_date_time": "PnYnMnDTnHnMnS", "end_date_time": "PnYnMnDTnHnMnS", "title": "Title of the event", "description": "description of the meeting, meeting room url, address of the place, etc." }”</p>

<p>//</p>

<p>“Information about arranged schedule will be provided.\n\</p>

<p>Do your best to describe the schedule as concisely as possible in json format.\n\</p>

<p>Required json format is as follow.\n\</p>

<p>{ "starting_date_time": "PnYnMnDTnHnMnS", "end_date_time": "PnYnMnDTnHnMnS", "title": "Title of the event", "description": "description of the meeting, meeting room url, address of the place, etc." }\</p>

<p>The ISO 8601 duration format "PnYnMnDTnHnMnS" represents a time interval from now:\n\</p>

<p>P: Period start.\n\</p>

<p>nY: Number of years.\n\</p>

<p>nM: Number of months.\n\</p>

<p>nW: Number of weeks.\n\</p>

<p>nD: Number of days.\n\</p>

<p>T: Time start (separates date and time).\n\</p>

<p>nH: Number of hours.\n\</p>

<p>nM: Number of minutes.\n\</p>

<p>nS: Number of seconds.\n\</p>

<p>If you know the exact time, the json format should be as follow.\n\</p>

<p>{ "starting_date_time": "YYYY-MM-DDThh:mm:ss", "end_date_time": "YYYY-MM-DDThh:mm:ss", "title": "Title of the event", "description": "description of the meeting, meeting room url, address of the place, etc." }”</p>

<p>//</p>

<p>“Information about arranged schedule will be provided.\n\</p>

<p>Do your best to describe the schedule as concisely as possible in json format.\n\</p>

<p>Required json format is as follow.\n\</p>

<p>{ "starting_date_time": "PnYnMnDTnHnMnS", "end_date_time": "PnYnMnDTnHnMnS", "title": "Title of the event", "description": "description of the meeting, meeting room url, address of the place, etc." }\</p>

<p>The ISO 8601 duration format "PnYnMnDTnHnMnS" represents a time interval from now:\n\</p>

<p>P: Period start.\n\</p>

<p>nY: Number of years.\n\</p>

<p>nM: Number of months.\n\</p>

<p>nW: Number of weeks.\n\</p>

<p>nD: Number of days.\n\</p>

<p>T: Time start (separates date and time).\n\</p>

<p>nH: Number of hours.\n\</p>

<p>nM: Number of minutes.\n\</p>

<p>nS: Number of seconds.\n\</p>

<p>If you know the exact time, the json format should be as follow.\n\</p>

<p>{ "starting_date_time": "YYYY-MM-DDThh:mm:ss", "end_date_time": "YYYY-MM-DDThh:mm:ss", "title": "Title of the event", "description": "description of the meeting, meeting room url, address of the place, etc." }”</p>

<p>//</p>

<p>  `Information about arranged schedule will be provided.\n\</p>

<p>Do your best to describe the schedule as concisely as possible in json format.\n\</p>

<p>Consider the date now : ${isoString}.\n" + “Required json format is as follow\n\</p>

<p>{ "starting_date_time": "YYYY-MM-DDThh:mm:ss", "end_date_time": "YYYY-MM-DDThh:mm:ss", "title": "Title of the event", "description": "description of the meeting, meeting room url, address of the place, etc." }`</p>]]></content><author><name>Doehyung Lee</name></author><category term="projects" /><category term="Blog" /><summary type="html"><![CDATA[One simple idea that integrates AI into]]></summary></entry><entry><title type="html">github.io 블로그 시작하기</title><link href="https://cjsj156/cjsj156.github.io/blog/2024/06/22/github-blog-start.html" rel="alternate" type="text/html" title="github.io 블로그 시작하기" /><published>2024-06-22T00:00:00+09:00</published><updated>2024-06-22T00:00:00+09:00</updated><id>https://cjsj156/cjsj156.github.io/blog/2024/06/22/github-blog-start</id><content type="html" xml:base="https://cjsj156/cjsj156.github.io/blog/2024/06/22/github-blog-start.html"><![CDATA[<p>이 글의 제목은 github.io 블로그 시작하기이고
마지막으로 수정된 시간은 이다.</p>

<p>Github Pages 튜토리얼을 따라해서 작성함.
https://devinlife.com/howto/</p>

<p>Ruby는 sudo apt install 로 설치하면 안됨. 이하 참조
https://qiita.com/kerupani129/items/77dd1e3390b53f4e97b2</p>]]></content><author><name>Doehyung Lee</name></author><category term="Blog" /><category term="Blog" /><summary type="html"><![CDATA[GitHub Blog 서비스인 github.io 블로그 시작하기로 했다.]]></summary></entry><entry><title type="html">Concept of Auto Schedule Register</title><link href="https://cjsj156/cjsj156.github.io/auto-schedule-register/2024/06/22/start.html" rel="alternate" type="text/html" title="Concept of Auto Schedule Register" /><published>2024-06-22T00:00:00+09:00</published><updated>2024-06-22T00:00:00+09:00</updated><id>https://cjsj156/cjsj156.github.io/auto-schedule-register/2024/06/22/start</id><content type="html" xml:base="https://cjsj156/cjsj156.github.io/auto-schedule-register/2024/06/22/start.html"><![CDATA[]]></content><author><name>Doehyung Lee</name></author><category term="auto-schedule-register" /><category term="Blog" /><summary type="html"><![CDATA[Not a super genius idea but one simple idea that integrates AI into our lives]]></summary></entry><entry><title type="html">블로그 운영 계획</title><link href="https://cjsj156/cjsj156.github.io/blog/2024/06/22/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9A%B4%EC%98%81-%EA%B3%84%ED%9A%8D.html" rel="alternate" type="text/html" title="블로그 운영 계획" /><published>2024-06-22T00:00:00+09:00</published><updated>2024-06-22T00:00:00+09:00</updated><id>https://cjsj156/cjsj156.github.io/blog/2024/06/22/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9A%B4%EC%98%81-%EA%B3%84%ED%9A%8D</id><content type="html" xml:base="https://cjsj156/cjsj156.github.io/blog/2024/06/22/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9A%B4%EC%98%81-%EA%B3%84%ED%9A%8D.html"><![CDATA[<p>블로그의 주된 목적은 취활이나, 이것저것 내가 생각한 것들을 적어서 올릴 것 같다. 포스팅할 때 사용하는 언어는 일본어로 할까 영어로 할까 고민 중. 일본어가 더 편하지만 그래도 영어로 써두는 게 나중에 더 이득이 되겠지?</p>

<p>그래서 어떤 카테고리를 쓸거냐면…</p>
<ul>
  <li>포트폴리오용 프로젝트 작성</li>
  <li>공부 내용 정리</li>
  <li>잡담, 생각 등
주로 이 3개를 작성하게 될 것 같다.</li>
</ul>]]></content><author><name>Doehyung Lee</name></author><category term="Blog" /><category term="Blog" /><summary type="html"><![CDATA[작심삼일을 반복할 것이 뻔하다]]></summary></entry><entry><title type="html">Who I Am</title><link href="https://cjsj156/cjsj156.github.io/who-i-am/2024/06/22/who-i-am.html" rel="alternate" type="text/html" title="Who I Am" /><published>2024-06-22T00:00:00+09:00</published><updated>2024-06-22T00:00:00+09:00</updated><id>https://cjsj156/cjsj156.github.io/who-i-am/2024/06/22/who-i-am</id><content type="html" xml:base="https://cjsj156/cjsj156.github.io/who-i-am/2024/06/22/who-i-am.html"><![CDATA[<h4 id="education">Education</h4>
<p>2020-2024 Tokyo Institute of Technology 
2024-Present Tokyo Institute of Technology 
permalink: - who-i-am</p>]]></content><author><name>Doehyung Lee</name></author><category term="who-i-am" /><summary type="html"><![CDATA[Who am I?]]></summary></entry></feed>